(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{314:function(_,v,t){"use strict";t.r(v);var a=t(6),i=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"操作系统基本原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#操作系统基本原理"}},[_._v("#")]),_._v(" 操作系统基本原理")]),_._v(" "),v("h2",{attrs:{id:"_1-操作系统概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-操作系统概述"}},[_._v("#")]),_._v(" 1. 操作系统概述")]),_._v(" "),v("h3",{attrs:{id:"_1-1-操作系统概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-操作系统概述"}},[_._v("#")]),_._v(" 1.1 操作系统概述")]),_._v(" "),v("p",[_._v("操作系统 "),v("strong",[_._v("（英语：Operating System，缩写：OS）")]),_._v(" 是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序。根据运行的环境，操作系统可以分为桌面操作系统，手机操作系统，服务器操作系统，嵌入式操作系统等。")]),_._v(" "),v("p",[_._v("基本的概述图")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220905000308015.png",alt:"image-20220905000308015"}})]),_._v(" "),v("h3",{attrs:{id:"_1-2-内容大纲"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-内容大纲"}},[_._v("#")]),_._v(" 1.2 内容大纲")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220825004300996.png",alt:"image-20220825004300996"}})]),_._v(" "),v("h2",{attrs:{id:"_2-操作系统原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作系统原理"}},[_._v("#")]),_._v(" 2. 操作系统原理")]),_._v(" "),v("h3",{attrs:{id:"_2-1-进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-进程"}},[_._v("#")]),_._v(" 2.1 进程")]),_._v(" "),v("h3",{attrs:{id:"_2-1-1-进程的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-进程的概念"}},[_._v("#")]),_._v(" 2.1.1 进程的概念")]),_._v(" "),v("p",[v("code",[_._v("进程（Process）")]),_._v("是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，通常一个进程中包含多个线程。有就绪、运行、阻塞三种基本状态。")]),_._v(" "),v("h3",{attrs:{id:"_2-1-2-进程的管理状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-进程的管理状态"}},[_._v("#")]),_._v(" 2.1.2 进程的管理状态")]),_._v(" "),v("p",[_._v("进程的状态分为三种：")]),_._v(" "),v("ul",[v("li",[_._v("运行")]),_._v(" "),v("li",[_._v("就绪")]),_._v(" "),v("li",[_._v("等待")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220825004943146.png",alt:"image-20220825004943146"}})]),_._v(" "),v("h3",{attrs:{id:"_2-1-3-前趋图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-前趋图"}},[_._v("#")]),_._v(" 2.1.3 前趋图")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220825005552518.png",alt:"image-20220825005552518"}})]),_._v(" "),v("p",[v("strong",[_._v("进程的同步和互斥")])]),_._v(" "),v("ul",[v("li",[_._v("互斥：在同一时刻，只允许某一个进程使用资源。即同一资源不能同时服务多个资源。反义词是共享。")]),_._v(" "),v("li",[_._v("同步：快的进程等待速度慢的进程。反义词是异步。")])]),_._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[_._v("生产者 --"),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),_._v("         /资源/         --"),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),_._v("  消费者      //单缓冲区情况\n生产者 --"),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),_._v("  /资源/ /资源/ /资源/  --"),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v(">")]),_._v("   消费者     //多缓冲区情况\n")])])]),v("blockquote",[v("p",[_._v("注意：单缓冲区只允许消费者或生产者其中之一操作（互斥），多缓冲区不影响生产者往里塞，资源满了生产者才会停下等待，资源空了消费者才会停下来等待（同步）。")])]),_._v(" "),v("h3",{attrs:{id:"_2-1-4-进程的pv操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-进程的pv操作"}},[_._v("#")]),_._v(" 2.1.4 进程的PV操作")]),_._v(" "),v("p",[_._v("P表示通过的意思，V表示释放的意思，V操作是不具备阻塞的能力的。")]),_._v(" "),v("ul",[v("li",[_._v("临界资源： 各个进程中需要抢着使用（互斥）的资源。")]),_._v(" "),v("li",[_._v("临界区： 每个进程中访问临界资源的那段代码成为临界区")]),_._v(" "),v("li",[_._v("信号量： 是一中特殊的变量")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220825013224504.png",alt:"image-20220825013224504"}})]),_._v(" "),v("ul",[v("li",[_._v("P操作会将信号量S减1，如果S<0则会阻塞进入等待队列，否则继续执行。")]),_._v(" "),v("li",[_._v("V操作会将信号量S加1，如果S≤0则会将进程取出队列，否则继续执行。")])]),_._v(" "),v("p",[_._v("🌰：假如S1初值为1，S2初值为0\n按时间顺序看如下表格，注意上图是PV操作，不是生产者和消费者别搞蒙了。")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("生产者")]),_._v(" "),v("th",[_._v("信号量")]),_._v(" "),v("th",[_._v("状态")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("生产一个产品 P(S1)")]),_._v(" "),v("td",[_._v("S1 = 1 - 1 = 0")]),_._v(" "),v("td",[_._v("继续执行")])]),_._v(" "),v("tr",[v("td",[_._v("送产品到缓冲区 V(S2)")]),_._v(" "),v("td",[_._v("S2 = 0 + 1 = 1")]),_._v(" "),v("td",[_._v("继续执行")])]),_._v(" "),v("tr",[v("td",[_._v("生产一个产品 P(S1)")]),_._v(" "),v("td",[_._v("S1 = 0 - 1 = -1")]),_._v(" "),v("td",[_._v("阻塞进入等待队")])])])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("消费者")]),_._v(" "),v("th",[_._v("信号量")]),_._v(" "),v("th",[_._v("状态")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("P(S2) 从缓冲区取出产品")]),_._v(" "),v("td",[_._v("S2 = -1 + 1 = 0")]),_._v(" "),v("td",[_._v("继续执行")])]),_._v(" "),v("tr",[v("td",[_._v("V(S1) 消费产品")]),_._v(" "),v("td",[_._v("S1 = -1 +1 = 0")]),_._v(" "),v("td",[_._v("唤醒生产者继续执行")])])])]),_._v(" "),v("p",[v("strong",[_._v("进程的PV结合前趋图")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220825014343821.png",alt:"image-20220825014343821"}})]),_._v(" "),v("h3",{attrs:{id:"_2-1-5-死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-死锁"}},[_._v("#")]),_._v(" 2.1.5 死锁")]),_._v(" "),v("p",[_._v("如果一个进程在等待一件不可能发生的事情，则进程进入死锁状态。而如果一个或多个进程产生死锁，就会造成系统死锁。")]),_._v(" "),v("p",[v("strong",[_._v("造成死锁的四大条件")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("互斥：所需资源通过互斥方式对其进行共享")])]),_._v(" "),v("li",[v("p",[_._v("保持等待：进程会对资源进行锁定等待，不会释放资源")])]),_._v(" "),v("li",[v("p",[_._v("不剥夺：进程在对资源进行调用时候，不会根据优先级进行资源掠夺，抢夺其他进程的资源")])]),_._v(" "),v("li",[v("p",[_._v("环路等待：进程之间相互等待资源，即A进程等待B进程完成，B进程等待C进程完成，C进程等待A进程完成，形成等待环路")])])]),_._v(" "),v("p",[v("code",[_._v("死锁的预防")]),_._v("：打破上述的死锁四大条件之一。")]),_._v(" "),v("p",[v("code",[_._v("死锁的避免")]),_._v("：有序资源分配法，银行家算法。")]),_._v(" "),v("h3",{attrs:{id:"_2-1-6-存储管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-6-存储管理"}},[_._v("#")]),_._v(" 2.1.6 存储管理")]),_._v(" "),v("p",[v("strong",[_._v("🥩逻辑地址与物理地址")])]),_._v(" "),v("ul",[v("li",[_._v("逻辑地址在计算机体系结构中是指应用程序角度看到的内存单元、存储单元、网络主机的地址。")]),_._v(" "),v("li",[_._v("物理地址是指主存的某个可以让数据总线访问的特定存储单元地址。")])]),_._v(" "),v("p",[v("strong",[_._v("🥩地址重定向")])]),_._v(" "),v("p",[_._v("程序和数据装入内存时，需对目标程序中的地址进行修改。这种把逻辑地址转变为内存物理地址的过程称作为地址重向。")]),_._v(" "),v("p",[v("code",[_._v("地址重定向又分两种")]),_._v("：")]),_._v(" "),v("ul",[v("li",[_._v("静态重定向")]),_._v(" "),v("li",[_._v("动态重定向")])]),_._v(" "),v("p",[v("strong",[_._v("🥩静态重定位")])]),_._v(" "),v("p",[_._v("目标程序装入内存时进行地址转换，在程序执行期间将不会再发生变化。")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("优点")]),_._v("：无须硬件地址变化机构（寄存器）的支持，只需要程序本身是可重定位的。")]),_._v(" "),v("li",[v("code",[_._v("缺点")]),_._v("：位置固定，不便共享。")])]),_._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/3e30f5e5c887dd56cb0c58cc75b64222.png",alt:"img"}}),_._v(" "),v("p",[v("strong",[_._v("🥩动态重定位")])]),_._v(" "),v("p",[_._v("程序运行期间完成逻辑地址到物理地址的转变，其实现机制依赖硬件地址变化机构（基地址寄存器）。")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("优点")]),_._v("：位置可变，不必连续；易于共享。")]),_._v(" "),v("li",[v("code",[_._v("缺点")]),_._v("：需要附加硬件支持。")])]),_._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/501d0c23bbe3c8fbeebe8d1b425ca338.png",alt:"img"}}),_._v(" "),v("p",[v("strong",[_._v("1）分区存储组织")])]),_._v(" "),v("p",[_._v("例子：某计算机系统的内存大小为128k,采用可变分区分配方式进行内存分配，当前系统的内\n存分块情况如下图所示，现有作业4申请内存9k,几种不同的存储分配算法在分配中，会产生什么样的结果呢？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/image-20220904233651972.png",alt:"image-20220904233651972"}})]),_._v(" "),v("p",[v("strong",[_._v("2）页式存储组织")])]),_._v(" "),v("p",[_._v("将程序与内存均划分为相同大小的块，以页为单位将程序调入内存。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("优点")]),_._v("：利用率高，碎片小，分配及管理简单")]),_._v(" "),v("li",[v("code",[_._v("缺点")]),_._v("：增加了系统的开销；可能产生抖动现象")])]),_._v(" "),v("p",[v("strong",[_._v("1.地址结构")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("页式存储地址由两部分组成：页号和页内地址（偏移量）。页的大小一般为512B~8KB。")])]),_._v(" "),v("li",[v("p",[_._v("假设页地址长度为32位，操作系统页大小为 4K，即通过短除法，对十进制字节大小转换成二进制，计算出十进制数码4096的二进制数表示为：从右到左数，最多存在12个连续的0位数码，得到页内偏移量为12。")])])]),_._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/722da51f2f4b9a8859986882b65d2137.png",alt:"img"}}),_._v(" "),v("p",[v("strong",[_._v("2.地址映射")])]),_._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/8863026e80056da1e871e78ccfcce1d5.png",alt:"img"}}),_._v(" "),v("p",[v("strong",[_._v("3.淘汰机制")])]),_._v(" "),v("ol",[v("li",[_._v("优先淘汰访问位置为0（最近未被访问）数据")]),_._v(" "),v("li",[_._v("其次淘汰修改位置为0（最近未被修改）数据")]),_._v(" "),v("li",[_._v("最后淘汰状态位置为0（不在内存中）数据")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/1fbbc8fea2e39412286cb848f9770269.jpeg",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("3）段式存储组织")])]),_._v(" "),v("p",[_._v("按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样。")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("优点")]),_._v("：多道程序共享内存，各段程序修改互不影响。")]),_._v(" "),v("li",[v("code",[_._v("缺点")]),_._v("：内存利用率低，内存碎片浪费大。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/11548bfbe2fc7cadf37e925da8b59bde.jpeg",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("地址映射")])]),_._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/507bc24b899764d2fb9e0f5be34d36bc.png",alt:"img"}}),_._v(" "),v("p",[v("strong",[_._v("4）段页式存储")])]),_._v(" "),v("p",[_._v("段式与页式的综合体。先分段，再分页。1个程序有若干段，每个段中可以有若干项，每个页的大小相同，但每个段的大小不同。")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("优点")]),_._v("：空间浪费小，存储共享容易，存储保护容易，能动态连接。")]),_._v(" "),v("li",[v("code",[_._v("缺点")]),_._v("：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降。")])]),_._v(" "),v("p",[v("strong",[_._v("地址结构")])]),_._v(" "),v("p",[_._v("段页式存储地址由三部分组成：段号、页号和页内地址。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/339c70b6d017638ca2b4d0647b736cda.png",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("动态地址转换")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/5897166504aef0eec492679e49344dbe.png",alt:"img"}})]),_._v(" "),v("h3",{attrs:{id:"_2-1-7-快表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-7-快表"}},[_._v("#")]),_._v(" 2.1.7 快表")]),_._v(" "),v("p",[_._v("快表是一块容量小的相联存储器(AssociativeMemory)，由高速缓存器组成，速度快，并且可以从硬件上保证内按容并行查找，一用般来存放当前访问最频繁少数的活动页面的页号。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("快表")]),_._v(": 将 页 表 存 Cache 于 上;")]),_._v(" "),v("li",[v("code",[_._v("慢表")]),_._v(" : 将 表页 存 于 内 存上。")])]),_._v(" "),v("h3",{attrs:{id:"_2-1-8-文件管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-8-文件管理"}},[_._v("#")]),_._v(" 2.1.8 文件管理")]),_._v(" "),v("p",[v("strong",[_._v("1.索引文件结构")])]),_._v(" "),v("p",[_._v("文件索引结构是指一个文件的信息存放在若干不连续的物理块中，系统为每个文件建立一个专用的数据结构——索引表，并将这些块号存放在索引表中。")]),_._v(" "),v("p",[_._v("文件在逻辑上一定是连续的，在物理上是可以分散的。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/40a7c8471d9de2f1f286fdf9b997ca12.png",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("2.位示图")])]),_._v(" "),v("p",[v("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E4%BD%8D%E7%A4%BA%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[_._v("位示图"),v("OutboundLink")],1),_._v("是利用二进制的一位（0或1）来表示磁盘中的一个盘块（物理块）的使用情况，当其值为0时表示空闲，当值为1时表示占用。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/eb589f2d8f5bf8ecdd3a51f554d9acab.png",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("3.树形目录结构")])]),_._v(" "),v("p",[v("strong",[v("code",[_._v("文件属性")])])]),_._v(" "),v("ul",[v("li",[_._v("R 只读文件属性")]),_._v(" "),v("li",[_._v("A 存档属性")]),_._v(" "),v("li",[_._v("S 系统文件")]),_._v(" "),v("li",[_._v("H 隐藏文件")])]),_._v(" "),v("p",[v("strong",[v("code",[_._v("文件名组成")])])]),_._v(" "),v("ul",[v("li",[_._v("驱动器号")]),_._v(" "),v("li",[_._v("路径")]),_._v(" "),v("li",[_._v("主文件名")]),_._v(" "),v("li",[_._v("扩展名")])]),_._v(" "),v("p",[v("strong",[v("code",[_._v("绝对路径与相对路径")])])]),_._v(" "),v("ul",[v("li",[_._v("绝对路径：是从盘符开始的路径。")]),_._v(" "),v("li",[_._v("相对路径：是从当前目录开始的路径。")]),_._v(" "),v("li",[_._v("若当前目录为：D1，要求F2路径，则：绝对路径：/D1/W2/F2，相对路径：W2/F2。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/8589499858e8375377bebede6b5005b5.png",alt:"img"}})]),_._v(" "),v("h3",{attrs:{id:"_2-1-9-特殊操作系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-9-特殊操作系统"}},[_._v("#")]),_._v(" 2.1.9 特殊操作系统")]),_._v(" "),v("p",[v("strong",[_._v("1.嵌入式操作系统 EOS")])]),_._v(" "),v("p",[_._v("嵌入式系统主要由嵌入式硬件平台、相关支撑硬件、嵌入式操作系统、支撑软件和应用软件组成。其中，嵌入性、专用性和计算机系统是嵌入式系统的三个核心要素。")]),_._v(" "),v("p",[_._v("典型的嵌入式系统具有以下特点")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("系统专用性强")])]),_._v(" "),v("li",[v("p",[_._v("系统实时性强")])]),_._v(" "),v("li",[v("p",[_._v("软硬件依赖性强")])]),_._v(" "),v("li",[v("p",[_._v("处理器专用")])]),_._v(" "),v("li",[v("p",[_._v("多种技术紧密结合")])]),_._v(" "),v("li",[v("p",[_._v("系统透明性")])]),_._v(" "),v("li",[v("p",[_._v("系统资源受限")])])]),_._v(" "),v("p",[_._v("嵌入式操作系统特点")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("微型化")])]),_._v(" "),v("li",[v("p",[_._v("代码质量高")])]),_._v(" "),v("li",[v("p",[_._v("专业化")])]),_._v(" "),v("li",[v("p",[_._v("实时性强")])]),_._v(" "),v("li",[v("p",[_._v("可裁剪可配置")])])]),_._v(" "),v("p",[_._v("针对不同的硬件平台，操作系统通常建立在一个硬件抽象层（HAL）上，该层位于底层硬件和内核之间，为内核提供各种方便移植的宏定义接口，在不同的平台间移植时，只需要修改宏定义即可。与硬件相关，与操作系统相关。")]),_._v(" "),v("p",[v("strong",[_._v("交叉开发环境")])]),_._v(" "),v("p",[_._v("由于嵌入式单板的资源有限，不能在单板上运行开发和调试工具，通常需要交叉编译调试的方式进行开发调试，即“宿主机+目标机”的形式，宿主机一般采用串口连接，也可同时通过网口或者JTAG连接。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/c437532107fc9bf8dbaa5fd06c0ead49.png",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("低功耗设计")])]),_._v(" "),v("p",[v("code",[_._v("基于硬件的低功耗设计")]),_._v("：板级电路低功耗设计；选择低功耗处理器；总线的低功耗设计；接口驱动电路的设计；分区分时供电技术。")]),_._v(" "),v("p",[v("code",[_._v("基于软件的低功耗设计")]),_._v("：编译优化技术（指令开销）；软件与硬件的系统设计（硬件功能交由软件完成）；算法优化（低时间复杂度）。")]),_._v(" "),v("p",[v("strong",[_._v("2.实时操作系统（RTOS）")])]),_._v(" "),v("p",[v("strong",[_._v("实时性能指标")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("任务切换时间")])]),_._v(" "),v("li",[v("p",[_._v("系统响应时间（对用户的输入或请求作出反应的时间）")])]),_._v(" "),v("li",[v("p",[_._v("信号量混洗时间（指从一个任务释放信号量到另一个等待该信号量的任务被激活的时间延迟）")])]),_._v(" "),v("li",[v("p",[_._v("中断处理相关的时间指标")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("中断延迟时间")])]),_._v(" "),v("li",[v("p",[_._v("中断响应时间")])])])])]),_._v(" "),v("p",[v("strong",[_._v("多任务调度算法")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("优先级调度算法：分配一个相对固定的优先顺序，然后调度程序根据优先级的高低排序，按时间顺序进行高优先级任务优先调度。（非抢占式）")])]),_._v(" "),v("li",[v("p",[_._v("抢占式调度算法：是在优先级调度算法的基础上，允许高优先级任务抢占低优先级任务而运行。")])]),_._v(" "),v("li",[v("p",[_._v("时间轮转调度算法：调度程序会依次调度每个任务运行一个小的时间片，然后再调度另一个任务。每个任务运行完一个时间片，无论是否结束都会释放CPU让下一个任务运行。（纯粹的时间轮转调度无法满足实时系统的要求，取而代之的是给予优先级的抢占式时间轮转调度）")])]),_._v(" "),v("li",[v("p",[_._v("最晚截止期调度算法：指调度程序按每个任务的最接近其截至期末端的时间进行调度。")])]),_._v(" "),v("li",[v("p",[_._v("最早截至期调度算法：指调度程序按每个任务的截至时间，选择最早到截止期头端时间的任务进行调度。")])])]),_._v(" "),v("p",[_._v("在RTOS中，大多数RTOS调度算法都是抢占式的。")]),_._v(" "),v("p",[v("strong",[_._v("实时操作系统比较")])]),_._v(" "),v("p",[_._v("常见的嵌入式RTOS有：VxWorks、RT-Linux、QNX、pSOS。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/f90138d1846aaba6835aadd12d18d4b3.png",alt:"img"}})]),_._v(" "),v("h3",{attrs:{id:"_2-1-10-微内核操作系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-10-微内核操作系统"}},[_._v("#")]),_._v(" 2.1.10 微内核操作系统")]),_._v(" "),v("p",[_._v("现代操作系统大多拥有两种工作状态，分别是核心态和用户态。一般应用程序工作在用户态，而内核模块和最基本的操作系统核心在核心态。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/a59ca3de4c6b9ffd8c7a7707b40281af.png",alt:"img"}})]),_._v(" "),v("p",[_._v("将传统的操作系统代码放置到更高层，从操作系统中去掉尽可能多的东西，而只留下最小的核心，称之为微内核（C/S结构）。")]),_._v(" "),v("p",[_._v("操作系统的内核服务："),v("code",[_._v("异常和中断、计时器、I/O管理等。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/isicman/image/main/img/ea5041759f47c4792ffdd8a0e06afb96.png",alt:"img"}})])])}),[],!1,null,null,null);v.default=i.exports}}]);