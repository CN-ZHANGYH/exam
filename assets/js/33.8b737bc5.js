(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{339:function(t,s,a){"use strict";a.r(s);var n=a(6),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-图的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-图的定义"}},[t._v("#")]),t._v(" 1.图的定义")]),t._v(" "),s("h3",{attrs:{id:"_1-1-什么是图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是图"}},[t._v("#")]),t._v(" 1.1 什么是图?")]),t._v(" "),s("ul",[s("li",[t._v("表示”多对多”的关系")]),t._v(" "),s("li",[t._v("包含\n"),s("ul",[s("li",[t._v("一组顶点：通常用 "),s("code",[t._v("V（Vertex）")]),t._v("表示顶点集合")]),t._v(" "),s("li",[t._v("一组边：通常用 E（Edge）表示边的集合\n"),s("ul",[s("li",[t._v("边是顶点对："),s("code",[t._v("（v,w）∈ E")]),t._v("，其中 "),s("code",[t._v("v,w ∈ V v—w")])]),t._v(" "),s("li",[t._v("有向边 "),s("code",[t._v("<v,w>")]),t._v(" 表示从 "),s("code",[t._v("v")]),t._v(" 指向 "),s("code",[t._v("w")]),t._v(" 的边（单行线） "),s("code",[t._v("v→w")])]),t._v(" "),s("li",[t._v("不考虑重边和自回路")])])])])])]),t._v(" "),s("h3",{attrs:{id:"_1-2-常见术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-常见术语"}},[t._v("#")]),t._v(" 1.2 常见术语")]),t._v(" "),s("ul",[s("li",[t._v("无向图：图中所有的边无所谓方向")]),t._v(" "),s("li",[t._v("有向图：图中的边可能是双向，也可能是单向的，方向是很重要的")]),t._v(" "),s("li",[t._v("权值：给图中每条边赋予的值，可能有各种各样的现实意义")]),t._v(" "),s("li",[t._v("网络：带权值的图")]),t._v(" "),s("li",[t._v("邻接点：有边直接相连的顶点")]),t._v(" "),s("li",[t._v("出度：从某顶点发出的边数")]),t._v(" "),s("li",[t._v("入度：指向某顶点的边数")]),t._v(" "),s("li",[t._v("稀疏图：顶点很多而边很少的图")]),t._v(" "),s("li",[t._v("稠密图：顶点多边也多的图")]),t._v(" "),s("li",[t._v("完全图：对于给定的一组顶点，顶点间都存在边")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-抽象数据类型定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-抽象数据类型定义"}},[t._v("#")]),t._v(" 1.3 抽象数据类型定义")]),t._v(" "),s("ul",[s("li",[t._v("类型名称："),s("code",[t._v("图（Graph）")])]),t._v(" "),s("li",[t._v("数据对象集："),s("code",[t._v("G（V，E）")]),t._v("由一个非空的有限顶点集合 V 和一个有限边集合 E 组成")]),t._v(" "),s("li",[t._v("操作集：对于任意图 "),s("code",[t._v("G ∈ Graph")]),t._v("，以及 "),s("code",[t._v("v ∈ V，e ∈ E")])])]),t._v(" "),s("p",[t._v("主要操作有：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Graph Create()")]),t._v("：建立并返回空图")]),t._v(" "),s("li",[s("code",[t._v("Graph InsertVertex(Graph G,Vertex v)")]),t._v("：将 v 插入 G")]),t._v(" "),s("li",[s("code",[t._v("Graph InsertEdge(Graph G,Edge e)")]),t._v("：将 e 插入 G")]),t._v(" "),s("li",[s("code",[t._v("void DFS(Graph G,Vertex v)")]),t._v("：从顶点 v 出发深度优先遍历图 G")]),t._v(" "),s("li",[s("code",[t._v("void BFS(Graph G,Vertex v)")]),t._v("：从顶点 v 出发宽度优先遍历图 G")])]),t._v(" "),s("h3",{attrs:{id:"_1-4-邻接矩阵表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-邻接矩阵表示"}},[t._v("#")]),t._v(" 1.4 邻接矩阵表示")]),t._v(" "),s("p",[s("strong",[t._v("特征：")])]),t._v(" "),s("ul",[s("li",[t._v("对角线元素全 0")]),t._v(" "),s("li",[t._v("关于对角线对称")])]),t._v(" "),s("p",[s("strong",[t._v("优点：")])]),t._v(" "),s("ul",[s("li",[t._v("直观、简单、好理解")]),t._v(" "),s("li",[t._v("方便检查任意一对顶点间是否存在边")]),t._v(" "),s("li",[t._v("方便找任一顶点的所有邻接点")]),t._v(" "),s("li",[t._v("方便计算任一顶点的度\n"),s("ul",[s("li",[s("code",[t._v("无向图")]),t._v("：对应行（或列）非 0 元素的个数")]),t._v(" "),s("li",[s("code",[t._v("有向图")]),t._v("：对应行非 0 元素的个数是出度；对应列非 0 元素的个数是入度")])])])]),t._v(" "),s("p",[s("strong",[t._v("缺点：")])]),t._v(" "),s("ul",[s("li",[t._v("浪费空间——存稀疏图")]),t._v(" "),s("li",[t._v("浪费时间——统计稀疏图的边")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219181135635.png",alt:"image-20221219181135635"}})]),t._v(" "),s("h3",{attrs:{id:"_1-5-邻接表表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-邻接表表示"}},[t._v("#")]),t._v(" 1.5 邻接表表示")]),t._v(" "),s("p",[s("strong",[t._v("特点：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("方便找任一顶点的所有邻接顶点")])]),t._v(" "),s("li",[t._v("节省稀疏图的空间\n"),s("ul",[s("li",[t._v("需要 N 个头指针 + 2E 个结点（每个结点至少 2 个域）")])])]),t._v(" "),s("li",[t._v("对于是否方便计算任一顶点的度\n"),s("ul",[s("li",[t._v("无向图：方便")]),t._v(" "),s("li",[t._v("有向图：只能计算出度")])])]),t._v(" "),s("li",[t._v("不方便检查任意一对顶点间是否存在边")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219181317701.png",alt:"image-20221219181317701"}})]),t._v(" "),s("h2",{attrs:{id:"_2-图的遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-图的遍历"}},[t._v("#")]),t._v(" 2.图的遍历")]),t._v(" "),s("p",[t._v("图的遍历分为两种:")]),t._v(" "),s("ul",[s("li",[t._v("广度优先")]),t._v(" "),s("li",[t._v("深度优先")])]),t._v(" "),s("h3",{attrs:{id:"_2-1-dfs-深度优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-dfs-深度优先"}},[t._v("#")]),t._v(" 2.1 DFS 深度优先")]),t._v(" "),s("p",[t._v("深度优先搜索（Depth First Search)，类似于树的先序遍历")]),t._v(" "),s("p",[t._v("若有 N 个顶点、E 条边，时间复杂度是")]),t._v(" "),s("ul",[s("li",[t._v("用邻接表存储，"),s("code",[t._v("O(N + E)")])]),t._v(" "),s("li",[t._v("用邻接矩阵存储，"),s("code",[t._v("O(N2^2)")])])]),t._v(" "),s("p",[s("strong",[t._v("深度优先遍历的步骤")])]),t._v(" "),s("ul",[s("li",[t._v("访问顶点V")]),t._v(" "),s("li",[t._v("依次从顶点V的未被访问的邻节点出发，进行深度优先搜索，直至和V有路径相通的顶点都被访问到。")]),t._v(" "),s("li",[t._v("对于连通图进行遍历时，从一个顶点出发即可访问图中所有的顶点。")]),t._v(" "),s("li",[t._v("对于非连通图进行遍历时，若图中尚有顶点未被访问，则另选一未曾访问的顶点作为起始点，进行深度优先搜索，直至所有顶点都被访问")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/73d7d950666d0403f09e3298b0b65fae.png",alt:"image"}})]),t._v(" "),s("p",[t._v("访问过程如图所示:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210531221032536.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjY0OTc2,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("遍历结果：v1,v2,v4,v8,v5,v3,v6,v7,v9,v10\n")])])]),s("h3",{attrs:{id:"_2-2-bfs-广度优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-bfs-广度优先"}},[t._v("#")]),t._v(" 2.2 BFS 广度优先")]),t._v(" "),s("p",[t._v("广度优先搜索（Breadth First Search)，相当于树的层序遍历")]),t._v(" "),s("p",[t._v("若有 N 个顶点、E 条边，时间复杂度是")]),t._v(" "),s("ul",[s("li",[t._v("用邻接表存储，"),s("code",[t._v("O(N + E)")])]),t._v(" "),s("li",[t._v("用邻接矩阵存储，"),s("code",[t._v("O(N2 ^2 )")])])]),t._v(" "),s("p",[s("strong",[t._v("广度优先遍历的步骤")])]),t._v(" "),s("p",[t._v("从顶点V出发广度优先搜索的步骤")]),t._v(" "),s("ul",[s("li",[t._v("访问顶点V")]),t._v(" "),s("li",[t._v("依次访问顶点V的各个未被访问的临接点（横向访问）")]),t._v(" "),s("li",[t._v('从V的这些邻接点出发依次访问他们的邻接点，致使“先被访问的顶点的邻接点先于"后访问的顶点的邻接点"被访问，直至图中所有已被访问的顶点的邻接点均被访问。')]),t._v(" "),s("li",[t._v("对于非连通图进行遍历时，若图中尚有顶点未被访问，则另选一未曾访问的顶点作为起始点，进行广度优先搜索，直至所有顶点都被访问")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/6bff0a5b5592729ea9dd86abb5256cf4.png",alt:"image"}})]),t._v(" "),s("p",[t._v("如上图所示，顶点A作为第一层，A的所有边顶点BF作为第二层，BF的所有边顶点CIGE作为第三层，依次类推。")]),t._v(" "),s("p",[t._v("示例遍历的过程：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210531221753303.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjY0OTc2,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("遍历的结果：V1,V2,V3,V4,V5,V6,V7,V8,V9,V10\n")])])]),s("h3",{attrs:{id:"_2-3-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-总结"}},[t._v("#")]),t._v(" 2.3 总结")]),t._v(" "),s("p",[t._v("两种遍历时间复杂度是相同的，不同的是对顶点的访问顺序不同。")]),t._v(" "),s("p",[t._v("两种算法没有优劣之分，视不同的情况选择不同的算法。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("深度优先更适合目标比较明确，以找到目标为主要目的的情况")])]),t._v(" "),s("li",[s("code",[t._v("广度优先更适合在不断扩大遍历范围时找到相对最优解的情况")])])]),t._v(" "),s("h2",{attrs:{id:"_3-最短路问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-最短路问题"}},[t._v("#")]),t._v(" 3.最短路问题")]),t._v(" "),s("h3",{attrs:{id:"_3-1-最短路径的概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-最短路径的概述"}},[t._v("#")]),t._v(" 3.1 最短路径的概述")]),t._v(" "),s("p",[t._v("在网络（带权图）中，求两个不同顶点之间的所有路径中，边的权值之和最小的那一条路径")]),t._v(" "),s("ul",[s("li",[t._v("这条路径就是两点之间的"),s("strong",[t._v("最短路径")]),t._v("（ShorttestPath）")]),t._v(" "),s("li",[t._v("第一个顶点为"),s("strong",[t._v("源点")]),t._v("（Source）")]),t._v(" "),s("li",[t._v("最后一个顶点为"),s("strong",[t._v("终点")]),t._v("（Destination）")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-分类"}},[t._v("#")]),t._v(" 3.2 分类：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("单源")]),t._v("最短路径问题：从某固定源点出发，求其到所有其他顶点的最短路径\n"),s("ul",[s("li",[t._v("（有向）无权图")]),t._v(" "),s("li",[t._v("（有向）有权图")])])]),t._v(" "),s("li",[s("strong",[t._v("多源")]),t._v("最短路径问题：求任意两顶点间的最短路径")])]),t._v(" "),s("h2",{attrs:{id:"_4-最小生成树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-最小生成树"}},[t._v("#")]),t._v(" 4.最小生成树")]),t._v(" "),s("h3",{attrs:{id:"_4-1-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基本概念"}},[t._v("#")]),t._v(" 4.1 基本概念")]),t._v(" "),s("p",[t._v("最小生成树（minimum spanning tree）其实就是一个生成树，不过它不同于一般的生成树，它的边权之和是最小的，即边权和最小的生成树，准确的来说，同一个图的最小生成树也可以有很多个，但是其边权和肯定是一样的")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219182807758.png",alt:"image-20221219182807758"}}),t._v(" "),s("p",[t._v("这个图的最小生成树是什么呢？")]),t._v(" "),s("p",[t._v("是如下这样：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219182828285.png",alt:"image-20221219182828285"}}),t._v(" "),s("p",[t._v("这是这张图的最小生成树，它的边权和是10。")]),t._v(" "),s("p",[t._v("而最小生成树作为一个问题，一般都会询问最小生成树的边权的最大值或者边权之和。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-最小生成树的做法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-最小生成树的做法"}},[t._v("#")]),t._v(" 4.2 最小生成树的做法")]),t._v(" "),s("p",[s("strong",[t._v("Kruscal（"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("克鲁斯卡尔"),s("OutboundLink")],1),t._v("）算法")])]),t._v(" "),s("p",[t._v("Kruscal的思路呢，其实是基于贪心的。Kruskal的时间复杂度为"),s("code",[t._v("O(mlogm)")]),t._v("，其主要的时间花费在给边排序上，其中m为边数，所以在使用的时候要注意下数据范围。")]),t._v(" "),s("p",[t._v("具体做法呢，就是按照下面几个步骤来")]),t._v(" "),s("ol",[s("li",[t._v("把图上的每一条边存在一个数组里，数组的每个元素应有（起点，边权，终点）三个数据")]),t._v(" "),s("li",[t._v("将该边数组按边权从小到大排序")]),t._v(" "),s("li",[t._v("依次按边的边权从小到大枚举每一条边，如果边的两个端点已经连通了，那就跳过这条边（通过并查集判断）")]),t._v(" "),s("li",[t._v("否则把总答案累计上这条边")]),t._v(" "),s("li",[t._v("用并查集merge这条边的两个端点")]),t._v(" "),s("li",[t._v("返回第3步")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<algorithm>")])]),t._v("\nusing namespace std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大顶点数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大边数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Edge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用结构体储存每一条边，便于排序")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示有一条 (u,v) 的无向边，边权为 w")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("maxm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ecnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于边表计数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEdge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加入一条无向边")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("ecnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ecnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("u "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ecnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ecnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("maxn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并查集相关")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" fa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" fa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 路径压缩")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点数")]),t._v("\nbool "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Edge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Edge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Kruskal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kruskal 算法核心过程")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化并查集")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ecnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" ecnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" u "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        u "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            fa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEdge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Kruskal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个代码的输入一个整数表示节点个数，而后面则输入一个邻接矩阵。输出的是该图的最小生成树的边权和。")])])}),[],!1,null,null,null);s.default=r.exports}}]);