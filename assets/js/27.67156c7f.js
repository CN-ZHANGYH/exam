(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{333:function(t,_,a){"use strict";a.r(_);var v=a(6),e=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-树的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-树的定义"}},[t._v("#")]),t._v(" 1.树的定义")]),t._v(" "),_("h3",{attrs:{id:"_1-1-树的特征"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-树的特征"}},[t._v("#")]),t._v(" 1.1 树的特征")]),t._v(" "),_("p",[t._v("树（Tree）：n（n≥0）个结点构成的有限集合,当 n=0 时，称为"),_("strong",[t._v("空树")])]),t._v(" "),_("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/9213b07eca806538fa88f4329adda144ad3482b5",alt:"二叉树"}}),t._v(" "),_("p",[t._v("对于任一棵非空树（n＞0），它具备以下特征：")]),t._v(" "),_("ul",[_("li",[t._v("树中有个称为"),_("code",[t._v("“根（Root）”")]),t._v("的特殊结点，用 r 表示")]),t._v(" "),_("li",[t._v("其余结点可分为 "),_("code",[t._v("m(m>0)")]),t._v(" 个互不相交的有限集 "),_("code",[t._v("T1 , T2 ,…, Tm")]),t._v(' ,其中每个集合本身又是一棵树，称为原来树的"子树（SubTree）"')]),t._v(" "),_("li",[t._v("子树是不相交的")]),t._v(" "),_("li",[t._v("除根结点外，每个结点有且仅有一个父结点")]),t._v(" "),_("li",[t._v("一棵 "),_("code",[t._v("N")]),t._v(" 个结点的树有 "),_("code",[t._v("N-1")]),t._v(" 条边")])]),t._v(" "),_("h3",{attrs:{id:"_1-2-树的基本术语"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-树的基本术语"}},[t._v("#")]),t._v(" 1.2 树的基本术语")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("结点的度（Degree）")]),t._v(" ：结点的子树个数")]),t._v(" "),_("li",[_("strong",[t._v("树的度")]),t._v(" ：树的所有结点中最大的度数")]),t._v(" "),_("li",[_("strong",[t._v("叶结点（Leaf）")]),t._v(" ：度为 0 的结点")]),t._v(" "),_("li",[_("strong",[t._v("父结点（Parent）")]),t._v(" ：有子树的结点是其子树的根结点的父结点")]),t._v(" "),_("li",[_("strong",[t._v("子结点（Child）")]),t._v(" ：若 A 结点是 B 结点的父结点，则称 B 结点是 A 结点的子结点，也称孩子结点")]),t._v(" "),_("li",[_("strong",[t._v("兄弟结点（Sibling）")]),t._v(" ：具有同一父结点的各个结点彼此是兄弟结点")]),t._v(" "),_("li",[_("strong",[t._v("路径")]),t._v(" ：从结点 n1  到 nk 的路径为一个结点序列,n1,n2,…,nk，ni是 ni+1的父结点")]),t._v(" "),_("li",[_("strong",[t._v("路径长度")]),t._v(" ：路径所包含边的个数")]),t._v(" "),_("li",[_("strong",[t._v("祖先结点（Ancestor）")]),t._v(" ：沿树根到某一结点路径上的所有结点都是这个结点的祖先结点")]),t._v(" "),_("li",[_("strong",[t._v("子孙结点（Descendant）")]),t._v(" ：某一结点的子树中的所有结点是这个结点的子孙")]),t._v(" "),_("li",[_("strong",[t._v("结点的层次（Level）")]),t._v(" ：规定根结点在 1 层，其他任一结点的层数是其父结点的层数加一")]),t._v(" "),_("li",[_("strong",[t._v("树的深度（Depth）")]),t._v(" ：树中所有结点中的最大层次是这棵树的深度")])]),t._v(" "),_("h3",{attrs:{id:"_1-3-树的表示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-树的表示"}},[t._v("#")]),t._v(" 1.3 树的表示")]),t._v(" "),_("p",[t._v("儿子-兄弟表示法")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219144042746.png",alt:"image-20221219144042746"}})]),t._v(" "),_("ul",[_("li",[t._v("Element 存值")]),t._v(" "),_("li",[t._v("FirstChild 指向第一个儿子")]),t._v(" "),_("li",[t._v("NextSibling 指向下一个兄弟")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219144539106.png",alt:"image-20221219144539106"}})]),t._v(" "),_("h2",{attrs:{id:"_2-二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-二叉树"}},[t._v("#")]),t._v(" 2.二叉树")]),t._v(" "),_("h3",{attrs:{id:"_2-1-二叉树的概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-二叉树的概述"}},[t._v("#")]),t._v(" 2.1 二叉树的概述")]),t._v(" "),_("p",[t._v("二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个节点最多只能有两棵子树，且有左右之分 。")]),t._v(" "),_("p",[t._v("二叉树是n个有限元素的"),_("a",{attrs:{href:"https://baike.baidu.com/item/%E9%9B%86%E5%90%88/2908117?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"}},[t._v("集合"),_("OutboundLink")],1),t._v("，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。当集合为空时，称该二叉树为空二叉树。在二叉树中，一个元素也称作一个节点  。")]),t._v(" "),_("p",[t._v("即度为 2 的树")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/20181026114920772.jpg",alt:"img"}})]),t._v(" "),_("ul",[_("li",[t._v("Element 存值")]),t._v(" "),_("li",[t._v("Left 指向左子树")]),t._v(" "),_("li",[t._v("Right 指向右子树")])]),t._v(" "),_("h3",{attrs:{id:"_2-2-二叉树的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-二叉树的定义"}},[t._v("#")]),t._v(" 2.2 二叉树的定义")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("二叉树 T：一个有穷的结点集合")])]),t._v(" "),_("li",[_("p",[t._v("这个集合可以为空")])]),t._v(" "),_("li",[_("p",[t._v("若不为空，则它是由"),_("code",[t._v("根结点")]),t._v("和称为其"),_("code",[t._v("左子树TL")]),t._v(" 和"),_("code",[t._v("右子树TR")])])]),t._v(" "),_("li",[_("p",[t._v("的两个不相交的二叉树组成")])]),t._v(" "),_("li",[_("p",[t._v("二叉树的子树有左右顺序之分")])])]),t._v(" "),_("h3",{attrs:{id:"_2-3-二叉树的五种形态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-二叉树的五种形态"}},[t._v("#")]),t._v(" 2.3 二叉树的五种形态")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/20181026114956314.jpg",alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"_2-3-二叉树的特殊形态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-二叉树的特殊形态"}},[t._v("#")]),t._v(" 2.3 二叉树的特殊形态")]),t._v(" "),_("p",[_("code",[t._v("斜二叉树")]),t._v(",")]),t._v(" "),_("ul",[_("li",[t._v("有左儿子或只有右儿子")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/20181026115013432.jpg",alt:"img"}})]),t._v(" "),_("p",[_("code",[t._v("完美二叉树（满二叉树）")])]),t._v(" "),_("ul",[_("li",[t._v("除最后一层叶结点外，每个结点都有两个子结点")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/20181026115028605.jpg",alt:"img"}})]),t._v(" "),_("p",[_("code",[t._v("完全二叉树")])]),t._v(" "),_("ul",[_("li",[t._v("有 n 个结点的二叉树，对树中结点按从上至下、从左到右顺序进行编号")]),t._v(" "),_("li",[t._v("编号为 "),_("code",[t._v("i（1 ≤ i ≤ n）")]),t._v("结点与满二叉树中编号为 "),_("code",[t._v("i")]),t._v(" 结点在二叉树中位置相同")])]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219152836649.png",alt:"image-20221219152836649"}}),t._v(" "),_("h3",{attrs:{id:"_2-4-二叉树的性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-二叉树的性质"}},[t._v("#")]),t._v(" 2.4 二叉树的性质")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219160437819.png",alt:"image-20221219160437819"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219161206361.png",alt:"image-20221219161206361"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/image-20221219161306726.png",alt:"image-20221219161306726"}})]),t._v(" "),_("h3",{attrs:{id:"_2-5-抽象的数据类型定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-抽象的数据类型定义"}},[t._v("#")]),t._v(" 2.5 抽象的数据类型定义")]),t._v(" "),_("ul",[_("li",[t._v("类型名称：二叉树")]),t._v(" "),_("li",[t._v("数据对象集：一个有穷的结点集合，若不为空，则由根结点和其左、右二叉子树组成")]),t._v(" "),_("li",[t._v("操作集："),_("code",[t._v("BT ∈ BinTree")]),t._v("，"),_("code",[t._v("Item ∈ ElementType")])])]),t._v(" "),_("p",[t._v("主要操作有：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Boolean IsEmpty(BinTree BT)")]),t._v("：判别 BT 是否为空")]),t._v(" "),_("li",[_("code",[t._v("void Traversal(BinTree BT)")]),t._v("：遍历，按某顺序访问每个结点")]),t._v(" "),_("li",[_("code",[t._v("BinTree CreatBinTree()")]),t._v("：创建一个二叉树")])]),t._v(" "),_("p",[t._v("常用的遍历方法有：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("void PreOrderTraversal(BinTree BT)")]),t._v("：先序——根、左子树、右子树")]),t._v(" "),_("li",[_("code",[t._v("void InOrderTraversal(BinTree BT)")]),t._v("：中序——左子树、根、右子树")]),t._v(" "),_("li",[_("code",[t._v("void PostOrderTraversal(BinTree BT)")]),t._v("：后序——左子树、右子树、根")]),t._v(" "),_("li",[_("code",[t._v("void LevelOrderTraversal(BinTree BT)")]),t._v("：层次遍历，从上到下、从左到右")])]),t._v(" "),_("h3",{attrs:{id:"_2-6-顺序存储结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-顺序存储结构"}},[t._v("#")]),t._v(" 2.6 顺序存储结构")]),t._v(" "),_("p",[t._v("按从上至下、从左到右顺序存储 n 个结点的完全二叉树的结点父子关系：")]),t._v(" "),_("ul",[_("li",[t._v("非根结点（序号 "),_("code",[t._v("i > 1")]),t._v("）的"),_("strong",[t._v("父结点")]),t._v("的序号是 "),_("code",[t._v("⌊i/2⌋")]),t._v("（向下取整）")]),t._v(" "),_("li",[t._v("结点（序号为 "),_("code",[t._v("i")]),t._v("）的"),_("strong",[t._v("左孩子结点")]),t._v("的序号是 "),_("code",[t._v("2i")]),t._v("（若 "),_("code",[t._v("2 i ≤ n")]),t._v("，否则没有左孩子")]),t._v(" "),_("li",[t._v("结点（序号为 "),_("code",[t._v("i")]),t._v("）的"),_("strong",[t._v("右孩子结点")]),t._v("的序号是 "),_("code",[t._v("2i+1")]),t._v("（若 "),_("code",[t._v("2 i +1 ≤ n")]),t._v("，否则没有右孩子")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/20181026115118948.jpg",alt:"img"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/20181026115134161.jpg",alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"_2-7-链表存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-链表存储"}},[t._v("#")]),t._v(" 2.7 链表存储")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("BinTree"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tElement Data"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存值 ")]),t._v("\n\tBinTree Left"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左儿子结点 ")]),t._v("\n\tBinTree Right"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 右儿子结点 ")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);