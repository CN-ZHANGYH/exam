(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{328:function(v,_,e){"use strict";e.r(_);var o=e(6),i=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"ooa-面向对象-的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ooa-面向对象-的基本概念"}},[v._v("#")]),v._v(" OOA（面向对象）的基本概念")]),v._v(" "),_("h3",{attrs:{id:"基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[v._v("#")]),v._v(" 基本概念")]),v._v(" "),_("ul",[_("li",[v._v("对象")]),v._v(" "),_("li",[v._v("类（实体类，边界类，控制类）")]),v._v(" "),_("li",[v._v("抽象")]),v._v(" "),_("li",[v._v("封装")]),v._v(" "),_("li",[v._v("继承与泛化")]),v._v(" "),_("li",[v._v("多态")]),v._v(" "),_("li",[v._v("接口")]),v._v(" "),_("li",[v._v("消息")]),v._v(" "),_("li",[v._v("组件")]),v._v(" "),_("li",[v._v("模式与复用")])]),v._v(" "),_("h3",{attrs:{id:"八大原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八大原则"}},[v._v("#")]),v._v(" 八大原则")]),v._v(" "),_("p",[v._v("面向对象的主要思想："),_("code",[v._v("分而治之，封装变化，高内聚，低耦合")])]),v._v(" "),_("ol",[_("li",[_("code",[v._v("类的单一职责")]),v._v("：设计目的单一的类，也就是一个类有且只有一个改变它的原因。")]),v._v(" "),_("li",[_("code",[v._v("开-闭原则")]),v._v("：对扩展开放，对修改关闭。（增加新功能，不改变原有代码。）")]),v._v(" "),_("li",[_("code",[v._v("里氏替换")]),v._v("（Liskov）原则：父类出现的地方可以被子类替换，在替换后依然保持原功能。")]),v._v(" "),_("li",[_("code",[v._v("依赖倒置")]),v._v("：要依赖于抽象，而不是具体实现；")]),v._v(" "),_("li",[_("code",[v._v("面向接口而非面向实现编程")]),v._v("：通过抽象操作实例，而无需关注具体类型。")]),v._v(" "),_("li",[_("code",[v._v("接口隔离")]),v._v("：尽量定义小而精的接口，少定义大而全的接口。")]),v._v(" "),_("li",[_("code",[v._v("组合复用")]),v._v("：要尽量使用组合，而不是继承关系达到重用的目的。")]),v._v(" "),_("li",[_("code",[v._v("迪米特（Demeter）原则（最小知识法则）")]),v._v("：一个对象应当对其他对象有尽可能少的了解。")])]),v._v(" "),_("h3",{attrs:{id:"设计模式的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的概念"}},[v._v("#")]),v._v(" 设计模式的概念")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("架构模式")]),v._v("：软件设计中的高层决策，例如C/S结构就属于架构模式，架构模式反应了开发软件系统过程中所作的基本设计决策。")]),v._v(" "),_("li",[_("code",[v._v("设计模式")]),v._v("：主要关注软件系统的设计，与具体的实现语言无关。")]),v._v(" "),_("li",[_("code",[v._v("惯用法")]),v._v("：是最底层的模式，关注软件系统的设计与实现，实现时通过某种特定的程序设计语言来描述构件与构件之间的关系。每种编程语言都有它自己特定的模式，即语言的惯用法。例如引用-计数就是C++语言中的一种惯用法。架构模式和设计模式的区别：是从全局还是从局部来分析的问题。")]),v._v(" "),_("li",[_("code",[v._v("设计模式和惯用法的区别")]),v._v("：是否和语言相关。")])]),v._v(" "),_("p",[v._v("设计模式的分类")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("创建型模式")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("工厂方法（factory method）模式")]),v._v("（定义一个创建对象的接口，但由子类决定需要实例化哪一个类。工厂方法使得子类实例化的过程推迟）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("抽象工厂（abstract factory）模式")]),v._v("（提供一个接口，可以创建一系列相关或相互依赖的对象，而无需指定他们具体的类）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("原型（prototype）模式")]),v._v("（用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的对象）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("单例（singleton）模式")]),v._v("（保证一个类只有一个实例，并提供一个访问它的全局访问点）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("构建器（builder）模式")]),v._v("（将一个复杂类的表示与其构造相分离，使得相同的构建过程能够得出不同的表示）")])])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("结构型模式")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("适配器（adapter）模式")]),v._v("（将一个类的接口转换成用户希望得到的另一种接口。它使原本不相容的接口得以协同工作）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("桥接（bridge）模式")]),v._v("（将类的抽象部分和它的实现部分分离开来，是他们可以独立地变化）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("组合（composite）模式")]),v._v("（将对象组合成树型结构以表示”整体-部分“地层次结构）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("装饰（decorator）模式")]),v._v("（动态地给一个对象添加一些额外的指责。它提供了用子类扩展功能的一个灵活的替代，比派生一个子类更加灵活）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("外观（facade）模式")]),v._v("（定义一个高层接口，为子系统中的一组接口提供一个一致的外观，从而简化了该子系统的使用）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("亨元（flyweight）模式")]),v._v("（提供支持大量细粒度对象共享的有效方法）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("代理（proxy）模式")]),v._v("（为其他对象提供了一种代理以控制这个对象的访问）")])])])]),v._v(" "),_("li",[_("p",[v._v("**行为型模式（**主要描述类之间交互的情况）")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("职责链（chain of reponsibility）模式")]),v._v("（通过给多个对象处理请求的机会，减少请求的发送者与接收者之间的耦合。将接受对象链接起来，在链中传递请求，直到有一个对象处理这个请求）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("命令（command）模式")]),v._v("（将一个请求封装为一个对象，从而可用不同的 请求对客户进行参数化，将请求排队或记录请求日志，支持可撤销的操作）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("解释器（interpreter）模式")]),v._v("（给定一种语言，定义它的文法表示，并定义一个解释器，该解释器用来根据文法表示来解释语言中的句子）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("迭代器（iterator）模式")]),v._v("（提供一种方法来顺序访问一个聚合对象中的各个元素，而不需要暴露该对象的内部表示）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("中介者（mediator）模式")]),v._v("（用一个中介对象来封装一系列的对象交互。它使各对象不需要显式地相互调用，从而达到低耦合，还可以独立地改变对象间的交互）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("备忘录（memento）模式")]),v._v("（在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("观察者（observer）模式")]),v._v("（定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("状态（state）模式")]),v._v("（允许一个对象在其内部状态改变时改变它的行为）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("策略（strategy）模式")]),v._v("（定义一系列算法，把它们一个个封装起来，并且使它们之间可相互替换，从而让算法可以独立于使用它的用户而变化）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("模板方法（template method）模式")]),v._v("（定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义算法的某些特定步骤）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("访问者（visitor）模式")]),v._v("（表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作）")])])])])])])}),[],!1,null,null,null);_.default=i.exports}}]);