(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{342:function(t,a,s){"use strict";s.r(a);var n=s(6),_=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"程序设计语言-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序设计语言-上"}},[t._v("#")]),t._v(" 程序设计语言（上）")]),t._v(" "),a("h3",{attrs:{id:"_1-程序设计语言及其构成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序设计语言及其构成"}},[t._v("#")]),t._v(" 1.程序设计语言及其构成")]),t._v(" "),a("h4",{attrs:{id:"_1-1-程序语言发展阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-程序语言发展阶段"}},[t._v("#")]),t._v(" 1.1 程序语言发展阶段")]),t._v(" "),a("p",[t._v("计算机要通过程序或指令来控制才能完成各种任务。 程序设计语言（计算机语言）：人与机器交换信息的语言。")]),t._v(" "),a("p",[t._v("阶段：")]),t._v(" "),a("ol",[a("li",[t._v("机器语言（低级语言）："),a("strong",[t._v("二进制")]),t._v("指令代码，直观性差，容易出错，计算机直接执行")]),t._v(" "),a("li",[t._v("汇编语言（低级语言）：用"),a("strong",[t._v("简单的符号")]),t._v("代替部分指令，推广移植困难，需经汇编程序转化后执行")]),t._v(" "),a("li",[t._v("高级语言：更符号人的思维，易读易记，便于推广，有"),a("strong",[t._v("解释")]),t._v("和"),a("strong",[t._v("编译")]),t._v("两种执行方式")])]),t._v(" "),a("h4",{attrs:{id:"_1-2-高级程序设计语言划分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-高级程序设计语言划分"}},[t._v("#")]),t._v(" 1.2 高级程序设计语言划分")]),t._v(" "),a("p",[t._v("从客观系统描述划分：")]),t._v(" "),a("ul",[a("li",[t._v("面向过程语言：\n"),a("ul",[a("li",[t._v("命令式语言：FORTRAN、ALGOL、COBOL、C和Pascal等")]),t._v(" "),a("li",[t._v("结构化语言（也属于命令式）：C、Pascal 等")]),t._v(" "),a("li",[t._v("函数式语言： Lisp 等")]),t._v(" "),a("li",[t._v("逻辑式编程语言：Prolog 等")])])]),t._v(" "),a("li",[t._v("面向对象语言："),a("code",[t._v("PHP、Delphi、Java、C++、Smalltalk、Python、C# 等")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("从程序执行角度划分：")]),t._v(" "),a("ul",[a("li",[t._v("编译类程序设计语言："),a("code",[t._v("C、C++、Delphi、Java")])]),t._v(" "),a("li",[t._v("解释类程序设计语言："),a("code",[t._v("Python、PHP、Ruby、JavaScript")])]),t._v(" "),a("li",[t._v("脚本语言："),a("code",[t._v("通常为解释执行。JavaScript为客户端脚本语言，Python、Ruby、PHP 为服务器端脚本语言")])])]),t._v(" "),a("h4",{attrs:{id:"_1-3-常见的高级程序设计语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-常见的高级程序设计语言"}},[t._v("#")]),t._v(" 1.3 常见的高级程序设计语言")]),t._v(" "),a("ul",[a("li",[t._v("Fortran语言："),a("strong",[t._v("第一个高级程序设计语言")]),t._v("，用于并行计算、科学计算和高性能计算。")]),t._v(" "),a("li",[t._v("Lisp语言："),a("strong",[t._v("函数式程序语言")]),t._v("，符号处理，人工智能")]),t._v(" "),a("li",[t._v("Prolog ：逻辑式语言，建造专家系统、自然语言理解、智能知识库等")]),t._v(" "),a("li",[t._v("SQL："),a("strong",[t._v("结构化查询语言")]),t._v("，特殊目的的编程语言，用于查询、更新和管理关系数据库")])]),t._v(" "),a("p",[t._v("通用的程序设计语言：C、C#、C++、Java、PHP、Python、JavaScript 等。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("C语言")]),t._v("：通用、结构化程序设计语言，简洁丰富可移植，能访问操作系统和底层硬件。")]),t._v(" "),a("li",[a("code",[t._v("C#语言")]),t._v("：面向对象，运行于 .NET Framework")]),t._v(" "),a("li",[a("code",[t._v("C++语言")]),t._v("：C语言基础上增加了类机制，面向对象，高效")]),t._v(" "),a("li",[a("code",[t._v("Java语言")]),t._v("：面向对象，跨平台，通用的程序设计语言")]),t._v(" "),a("li",[a("code",[t._v("Php")]),t._v("：服务端执行、嵌入HTML文档的脚本语言，制作动态网页")]),t._v(" "),a("li",[a("code",[t._v("Python")]),t._v("：面向对象，解释型程序设计语言，通用的脚本语言")]),t._v(" "),a("li",[a("code",[t._v("JavaScript 语言")]),t._v("：为网页添加动态功能")])]),t._v(" "),a("h4",{attrs:{id:"_1-4-标记语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-标记语言"}},[t._v("#")]),t._v(" 1.4 标记语言")]),t._v(" "),a("p",[t._v("非编程语言，不包含任何逻辑或算法")]),t._v(" "),a("p",[t._v("常见有：")]),t._v(" "),a("ul",[a("li",[t._v("HTML ： HyperText Markup Language，超文本标记语言")]),t._v(" "),a("li",[t._v("XML ： Extensible Markup Language，可扩展标记语言")]),t._v(" "),a("li",[t._v("XHTML ：Extensible HyperText Markup Language，扩展的超文本标记语言")])]),t._v(" "),a("h4",{attrs:{id:"_1-5-程序设计语言及其构成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-程序设计语言及其构成"}},[t._v("#")]),t._v(" 1.5 程序设计语言及其构成")]),t._v(" "),a("p",[t._v("数据成分： 常量、变量、全局量、局部量以及数据类型。")]),t._v(" "),a("p",[t._v("运算成分：程序语言允许使用运算符号及运算规则。")]),t._v(" "),a("p",[t._v("控制成分："),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("顺序结构"),a("OutboundLink")],1),t._v("、选择结构、循环结构。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/56712be2c2054009ad5bd0d70ea88b2a.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"_2-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-表达式"}},[t._v("#")]),t._v(" 2.表达式")]),t._v(" "),a("p",[t._v("表达式的分类有如下：")]),t._v(" "),a("ul",[a("li",[t._v("前缀表达式 +ab")]),t._v(" "),a("li",[t._v("中缀表达式 a+b")]),t._v(" "),a("li",[t._v("后缀表达式（"),a("strong",[t._v("逆波兰式")]),t._v("） ab+")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("示例： \n\n将中缀表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a-b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c+5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("转为后缀表达式\n首先注意计算的顺序 a-b 、c+5、最后是 *\n得到结果 ab- c5+ *\n")])])]),a("p",[t._v("后缀表达式的运算过程（转为中缀表达式）")]),t._v(" "),a("p",[t._v("使用栈可以很方便的进行运算，运算过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("遇到运算对象压入到栈里面")]),t._v(" "),a("li",[t._v("遇到运算符从栈中取出两个对象，并进行计算")]),t._v(" "),a("li",[t._v("将计算的结果再压入到栈里面")]),t._v(" "),a("li",[t._v("重复上述过程，直到结束")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("上面的例子 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a-b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c+5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，转为后缀表达式 ab- c5+ *\n\n将a、b入栈\n遇到运算符*-* ⇒ 进行 a-b 运算 ⇒ 计算结果x压入栈\n将 c、5如入栈\n遇到 + ⇒ 进行 c-5 运算 ⇒ 将计算结果 y 压入栈\n遇到 * ⇒ 进行 x*y 运算 ⇒ 将计算结果 压入栈\n")])])]),a("blockquote",[a("p",[t._v("金典练习：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("算术表达式采用后缀式表示时不需要使用括号，使用（）就可以方便地进行求值。a－b*（c＋d）的后缀式为（）。\n\nA. 队列 \nB. 数组 \nC.栈 \nD. 广义表\n\nA. a b c d- * +\nB. a b c d * + -\nC. a b – c * d +\nD. a b c d + * -\n\n答案 C 、D\n")])])]),a("h3",{attrs:{id:"_3-传值和传址调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-传值和传址调用"}},[t._v("#")]),t._v(" 3.传值和传址调用")]),t._v(" "),a("p",[t._v("▶数据类型：")]),t._v(" "),a("p",[t._v("数据值是否改变：")]),t._v(" "),a("ul",[a("li",[t._v("常量：只有右值，值不能改变")]),t._v(" "),a("li",[t._v("变量：有左值和右值，值可改变")])]),t._v(" "),a("p",[t._v("作用域：")]),t._v(" "),a("ul",[a("li",[t._v("全局变量：存储空间一般不变")]),t._v(" "),a("li",[t._v("局部变量：存储空间动态变化")])]),t._v(" "),a("p",[t._v("数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("基本类型： int、char、float、double、bool")]),t._v(" "),a("li",[t._v("特殊类型：void")]),t._v(" "),a("li",[t._v("用于定义类型：enum")]),t._v(" "),a("li",[t._v("构造类型：数组、结构、联合")]),t._v(" "),a("li",[t._v("指针类型：type *")]),t._v(" "),a("li",[t._v("抽象数据类型：类类型")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("传递方式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("主要特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("传值调用")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("形参取的是实参的值，形参的改变不会导致调用点所传的实参的值发生改变")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("引用（传址）调用")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("形参取的是实参的地址，即相当于实参存储的是地址引用，因此其值的改变同时改变了实参的值。 参数的左值为地址，右值为具体的值。")])])])]),t._v(" "),a("p",[a("code",[t._v("1.传值调用示例")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刚刚开始调用的时候 a=3, b=4, x=3, y=4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行完之后，a=3, b=4, x=4, y=3")]),t._v("\n")])])]),a("p",[a("code",[t._v("2.传址调用示例")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刚刚开始调用的时候 a=3, b=4, x=3, y=4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行完之后，a=4, 3=4, x=4, y=3")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-语言处理程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-语言处理程序"}},[t._v("#")]),t._v(" 4.语言处理程序")]),t._v(" "),a("ul",[a("li",[t._v("语言处理程序："),a("code",[t._v("将高级语言转换成计算机可执行的机器语言，分为汇编、编译和解释程序")])]),t._v(" "),a("li",[t._v("汇编程序：翻译由汇编语言编写的程序")]),t._v(" "),a("li",[t._v("解释程序：针对高级编写的源程序，直接解释执行源程序")]),t._v(" "),a("li",[t._v("编译程序：源程序翻译成目标语言程序，然后执行目标程序")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/d3ed72c0ce064f418549105b602dfab8.png",alt:"img"}})]),t._v(" "),a("p",[t._v("▶汇编程序")]),t._v(" "),a("p",[a("code",[t._v("把汇编语言书写的程序翻译成与之等价的机器语言程序的翻译程序。")])]),t._v(" "),a("p",[t._v("汇编程序输入的是用汇编语言书写的源程序，输出的是用机器语言表示的目标程序。")]),t._v(" "),a("p",[t._v("汇编语言是为特定计算机或计算机系列设计的一种面向机器的语言，由汇编执行指令和汇编伪指令组成。")]),t._v(" "),a("ul",[a("li",[t._v("**第一次扫描：**定义符号的值并创建符号表 ST。汇编器中，利用了LC（地址跟踪计数器）。LC是汇编语言的指针，每识别出1个指令，LC就增加1。")]),t._v(" "),a("li",[a("strong",[t._v("第二次扫描")]),t._v("：生成机器语言，产生目标程序。第一次扫描已经生成了符号表，第二次扫描时即可利用汇编器的“指令表”将对应的指令翻译成机器指令，同时将LC执行的内存地址填入机器码或数值。")])]),t._v(" "),a("p",[t._v("▶解释程序")]),t._v(" "),a("p",[t._v("解释程序是一种语言处理程序。")]),t._v(" "),a("p",[t._v("在词法、语法和语义分析方面与编译程序的工作原理基本相同。")]),t._v(" "),a("p",[t._v("但在运行用户程序时，它直接执行源程序或源程序的内部形式（中间代码）。")]),t._v(" "),a("p",[a("strong",[t._v("解释程序并不产生目标程序，这是它和编译程序的主要区别。")])]),t._v(" "),a("p",[t._v("▶高级语言执行过程")]),t._v(" "),a("p",[t._v("用高级语言编写出的程序要能在计算机上运行时，由于计算机识别二进制，因此需要对源程序依次进行"),a("strong",[t._v("预处理、编译和链接")]),t._v("的过程，才能确保源程序正确被执行。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/c82d61ab319349c885ec8bf38c20b99a.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"_5-编译程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-编译程序"}},[t._v("#")]),t._v(" 5.编译程序")]),t._v(" "),a("p",[t._v("▶编译过程")]),t._v(" "),a("p",[t._v("编译程序的功能是把某高级语言书写的源程序翻译成与之等价的目标程序（汇编语言程序或机器语言程序）。编译程序的工作可分为6个阶段，如下图所示，实际的编辑可能会将其中的某些阶段结合在一起进行处理。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/c77790fd2c9e44cea73d4b777b3e6983.png",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[t._v("注意："),a("code",[t._v("在编译阶段，语义检查属于静态语义检查。动态语义检查是在运行阶段进行的。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/8ed3d012f3e842e4ae92551b528ea198.png",alt:"img"}})]),t._v(" "),a("p",[t._v("▶词法分析")]),t._v(" "),a("p",[t._v("词法分析：从左到右逐个扫码源程序中的字符，识别其中的关键字"),a("code",[t._v("（或保留字）、标识符、常数、运算符、分隔符（标点符号和括号）")]),t._v("等")]),t._v(" "),a("p",[t._v("▶语法分析")]),t._v(" "),a("p",[t._v("语法分析：根据语法规则将单词符号分解成各类语法单位，并分析源程序是否存在语法上的错误。包括："),a("code",[t._v("语言结构错误、if...end不匹配、缺少分号、括号不匹配、表达式缺少操作数等")]),t._v("。")]),t._v(" "),a("p",[t._v("▶语义分析")]),t._v(" "),a("p",[t._v("语义分析：进行类型分析和检查，主要检测程序是否存在静态语义错误。包括："),a("code",[t._v("运算符和运算类型不符合")]),t._v("，如"),a("code",[t._v("取余时用浮点数。")])]),t._v(" "),a("p",[t._v("▶出错处理")]),t._v(" "),a("p",[t._v("静态错误：")]),t._v(" "),a("ul",[a("li",[t._v("编译时所发现的程序错误（编译正确的程序没有静态错误）")]),t._v(" "),a("li",[t._v("分为语法错误和静态语义错误。")]),t._v(" "),a("li",[t._v("语法错误包括：单词拼写错误、标点符号错误、表达式中缺少操作数、括号不匹配等有关语言结构上的错误。")]),t._v(" "),a("li",[t._v("静态语义错误：运算符和运算类型不符合等错误。")])]),t._v(" "),a("p",[t._v("动态错误：")]),t._v(" "),a("ul",[a("li",[t._v("发生在程序运行时（程序可通过编译）")]),t._v(" "),a("li",[t._v("也叫动态语义错误")]),t._v(" "),a("li",[t._v("包括：陷入死循环、变量取零时做除数、引用数组下标越界等错误。")])]),t._v(" "),a("h3",{attrs:{id:"_6-有限自动机和正规式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-有限自动机和正规式"}},[t._v("#")]),t._v(" 6.有限自动机和正规式")]),t._v(" "),a("h4",{attrs:{id:"_6-1-正规式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-正规式"}},[t._v("#")]),t._v(" 6.1 正规式")]),t._v(" "),a("p",[t._v("正规式："),a("code",[t._v("由正规文法转换而来，通常正规文法等价于正规式。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("文法产生式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("正规式")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("规则1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A→xB, B→y")]),t._v(" "),a("td",[t._v("A=xy")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("规则2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A→xA|y")]),t._v(" "),a("td",[t._v("A=x*y")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("规则3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A→x, A→y")]),t._v(" "),a("td",[t._v("A=x|y")])])])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("*")]),t._v("表示可以出现0次或任意多次")]),t._v(" "),a("p",[a("code",[t._v("x|y")]),t._v("表示可能x、也可能是y")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("正规式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("正规集")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ab")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("符号串ab构成的集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a|b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("字符串a、b构成的集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a*")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("由0个或多个a构成的符号串集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("(a|b)*")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("所有字符a和b构成的串的集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a(a|b)*")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("a为首字符的a、b字符串集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("(a|b)*abb")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("以abb结尾的a、b字符串的集合")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("ab：只有一种情况，就是 ab")]),t._v(" "),a("p",[t._v("a|b：有两种情况，a或者b")]),t._v(" "),a("p",[t._v("a*：有无数种情况")])]),t._v(" "),a("h4",{attrs:{id:"_6-2-正规式与有限自动机的状态转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-正规式与有限自动机的状态转换"}},[t._v("#")]),t._v(" 6.2 正规式与有限自动机的状态转换")]),t._v(" "),a("p",[t._v("正规式与有限自动机的状态转换图的关系")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/aae6817c67a546daafb73cfb9b259ec9.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_6-3-有限自动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-有限自动机"}},[t._v("#")]),t._v(" 6.3 有限自动机")]),t._v(" "),a("p",[t._v("有限自动机是在词法分析阶段使用的，它分为确定的有限自动机（DFA）和非确定的有限自动机（NDFA）")]),t._v(" "),a("blockquote",[a("p",[t._v("任何一个有穷的序列，经过有穷步转移后，都能落到一个具体的状态上，有穷自动机能够判断是接受还是拒绝。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("DFA的定义\n\nDFA定义，M "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" S, ∑, f, q₀, Z "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，其中\n\nS：有穷状态集\n\n∑：输入字母表；\n\nf ：S × ∑ → S 转移函数，表示一个状态的后续状态有若干个\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S × ∑* → S 转移函数，扩展转移函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nq₀ ∈ S ：初始状态\n\nZ ⊆ S ：接受状态（终结状态）集合\n\nL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" w ∈ ∑* "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q₀,w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ∈ Z "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_6-4-非确定的有限自动机-nfa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-非确定的有限自动机-nfa"}},[t._v("#")]),t._v(" 6.4 非确定的有限自动机(NFA)")]),t._v(" "),a("p",[t._v("确定的有限自动机，它所有的状态的下一个状态是唯一确定的。")]),t._v(" "),a("p",[t._v("非确定的有限自动机的下一个状态是可以不唯一确定")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("ε移动")]),t._v("：不需要任何输入符号，就可以从一个状态转到另一个状态。例如下图的 "),a("code",[t._v("q2")]),t._v(" 可以不输入符号直接转成 "),a("code",[t._v("q3")])]),t._v(" "),a("li",[a("strong",[t._v("多种选择")]),t._v("（含0种选择）：比如下图的中 "),a("code",[t._v("q1")]),t._v("状态下，输入1时可以转成"),a("code",[t._v("q2")]),t._v("，也可以原地不动（2种选择）；"),a("code",[t._v("q3")]),t._v("状态下输入0，无路可走，没有选择（0种选择）。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/2b2c6dc9a53a4c0581aae9d355ad0368.png",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[t._v("原文出自：")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/chenjian723122704/article/details/124516183")])])])}),[],!1,null,null,null);a.default=_.exports}}]);