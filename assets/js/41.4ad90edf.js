(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{348:function(t,a,r){"use strict";r.r(a);var e=r(6),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_14种uml图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14种uml图"}},[t._v("#")]),t._v(" 14种UML图")]),t._v(" "),a("h3",{attrs:{id:"uml图有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml图有哪些"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=UML%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("UML图"),a("OutboundLink")],1),t._v("有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("UML图分为结构图和行为图。")]),t._v(" "),a("li",[t._v("结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图、包图。")]),t._v(" "),a("li",[t._v("行为图又分活动图、用例图、状态机图和交互图。")]),t._v(" "),a("li",[t._v("交互图又分为序列图、时序图、通讯图、交互概览图。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/0efa97d75c214c9fa61ba62a2f1f6c94.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"uml图概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml图概览"}},[t._v("#")]),t._v(" UML图概览")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/a273aa940c0e4262982640dd0fb6935e.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"什么是类图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是类图"}},[t._v("#")]),t._v(" 什么是类图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】 类图是一切面向对象方法的核心建模工具。类图描述了系统中对象的类型以及它们之间存在的各种静态关系。")]),t._v(" "),a("li",[t._v("【目的】用来表示类、接口以及它们之间的静态结构和关系。")])]),t._v(" "),a("h4",{attrs:{id:"泛化-generalization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛化-generalization"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E6%B3%9B%E5%8C%96&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("泛化"),a("OutboundLink")],1),t._v("（Generalization）")]),t._v(" "),a("ul",[a("li",[t._v("【泛化关系】是一种继承关系，表示子类继承父类的所有特征和行为。")]),t._v(" "),a("li",[t._v("【箭头指向】带三角箭头的实线，箭头指向父类。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/0acee1af337541f1946eda0b31bc0669.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"实现-realization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-realization"}},[t._v("#")]),t._v(" 实现（Realization）")]),t._v(" "),a("ul",[a("li",[t._v("【实现关系】是一种类与接口的关系，表示类是接口所有特征和行为的实现。")]),t._v(" "),a("li",[t._v("【箭头指向】带三角箭头的虚线，箭头指向接口。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/8d703078953d4f2e9b5adf402cb1ba59.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"关联-association"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联-association"}},[t._v("#")]),t._v(" 关联（Association）")]),t._v(" "),a("ul",[a("li",[t._v("【关联关系】是一种拥有关系，它使得一个类知道另一个类的属性和方法。")]),t._v(" "),a("li",[t._v("【代码体现】成员变量")]),t._v(" "),a("li",[t._v("【箭头指向】带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/3968c1afbe7349558c9f8d117a9a4227.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"聚合-aggregation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合-aggregation"}},[t._v("#")]),t._v(" 聚合（Aggregation）")]),t._v(" "),a("ul",[a("li",[t._v("【聚合关系】是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。")]),t._v(" "),a("li",[t._v("【代码体现】成员变量")]),t._v(" "),a("li",[t._v("【箭头指向】带空心菱形的实线，空心菱形指向整体。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/05ead3d2fad441719f1cf509dd34cbdf.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"组合-composition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合-composition"}},[t._v("#")]),t._v(" 组合（Composition）")]),t._v(" "),a("ul",[a("li",[t._v("【组合关系】是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。")]),t._v(" "),a("li",[t._v("【代码体现】成员变量")]),t._v(" "),a("li",[t._v("【箭头指向】带实心菱形和普通箭头的实线，实心菱形指向整体。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/90f1523265264d20af5777e7259f9a6a.png",alt:"img"}})]),t._v(" "),a("p",[t._v("鸟是整体，翅膀是部分。鸟死了，翅膀也就不能飞了。所以是组合。我们再看一下，下面的一组经典的聚合组合关系的例子。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/3fc9b53e874d40b680fa486b7ef127fb.png",alt:"img"}})]),t._v(" "),a("p",[t._v("一个公司拥有多个部门，公司和部门之间是组合关系，公司破产了，部门就不复存在了。部门和员工是聚合关系，部门被裁掉，员工就换下家了。")]),t._v(" "),a("h4",{attrs:{id:"依赖-dependency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖-dependency"}},[t._v("#")]),t._v(" 依赖（Dependency）")]),t._v(" "),a("ul",[a("li",[t._v("【依赖关系】是一种使用关系，即一个类的实现需要另一个类的协助。")]),t._v(" "),a("li",[t._v("【箭头指向】带普通箭头的虚线，普通箭头指向被使用者。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/93dad21111144053a5c4538db2e10a47.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"什么是组件图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是组件图"}},[t._v("#")]),t._v(" 什么是"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E7%BB%84%E4%BB%B6%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("组件图"),a("OutboundLink")],1),t._v("？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】描绘了系统中组件提供的、需要的接口、端口等，以及它们之间的关系。")]),t._v(" "),a("li",[t._v("【目的】用来展示各个组件之间的依赖关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/7a54f7ac16204a3c9e8096878785ab45.png",alt:"img"}})]),t._v(" "),a("p",[t._v("订单系统组件依赖于客户资源库和库存系统组件。中间的虚线箭头表示依赖关系。另外两个符号，表示组件连接器，一个提供接口，一个需要接口。")]),t._v(" "),a("h2",{attrs:{id:"什么是部署图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是部署图"}},[t._v("#")]),t._v(" 什么是"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E9%83%A8%E7%BD%B2%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("部署图"),a("OutboundLink")],1),t._v("？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】描述了系统内部的软件如何分布在不同的节点上。")]),t._v(" "),a("li",[t._v("【目的】用来表示软件和硬件的映射关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/3a662c63bc3549ac956ee8923a0e6440.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中简单的表示，不同机器上面部署的不同软件。")]),t._v(" "),a("h2",{attrs:{id:"什么是对象图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象图"}},[t._v("#")]),t._v(" 什么是对象图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】对象图是类图的一个实例，是系统在某个时间点的详细状态的快照。")]),t._v(" "),a("li",[t._v("【目的】用来表示两个或者多个对象之间在某一时刻之间的关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/deb0b66aacce45ae92d398a6b83e5f19.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中就是描述的，某时间点"),a("code",[t._v("bat")]),t._v("这个公司有一个研发部，一个销售部，两个部门只有一个人"),a("code",[t._v("iisheng")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"什么是包图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是包图"}},[t._v("#")]),t._v(" 什么是包图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】描绘了系统在包层面上的结构设计。")]),t._v(" "),a("li",[t._v("【目的】用来表示包和包之间的依赖关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/c460caa68c8c497d8db29092a8539594.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("《Use》关系表示使用依赖，"),a("code",[t._v("Web Shopping")]),t._v("依赖"),a("code",[t._v("Payment")])]),t._v(" "),a("li",[t._v("《Merge》关系表示合并，"),a("code",[t._v("Web Shopping")]),t._v("合并了"),a("code",[t._v("Shopping Cart")]),t._v("就拥有了"),a("code",[t._v("Shopping Cart")]),t._v("的功能")]),t._v(" "),a("li",[t._v("《Access》关系表示私有引入，比如代码中的指定包名类名")]),t._v(" "),a("li",[t._v("《Import》关系表示公共引入，比如Java中的"),a("code",[t._v("import")]),t._v("之后，就可以直接使用"),a("code",[t._v("import")]),t._v("包中的类了。")])]),t._v(" "),a("h2",{attrs:{id:"什么是组合结构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是组合结构图"}},[t._v("#")]),t._v(" 什么是组合结构图？")]),t._v(" "),a("ul",[a("li",[t._v('【概念】描述了一个"组合结构"的内部结构，以及他们之间的关系。这个"组合结构"可以是系统的一部分，或者一个整体。')]),t._v(" "),a("li",[t._v('【目的】用来表示系统中逻辑上的"组合结构"。')])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/eff642f496b941e19f766e09424322aa.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中描述了"),a("code",[t._v("Car")]),t._v("是由车轴连接着的两个前面轮子、两个后面轮子，和引擎组合的。")]),t._v(" "),a("h2",{attrs:{id:"什么是轮廓图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是轮廓图"}},[t._v("#")]),t._v(" 什么是轮廓图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】轮廓图提供了一种通用的扩展机制，用于为特定域和平台定制UML模型。")]),t._v(" "),a("li",[t._v("【目的】用于在特定领域中构建UML模型。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/47dca30f4796475ea7cebf7f2821ff53.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中我们定义了一个简易的"),a("code",[t._v("EJB")]),t._v("的概要图。"),a("code",[t._v("Bean")]),t._v("是从"),a("code",[t._v("Component")]),t._v("扩展来的。"),a("code",[t._v("Entity Bean")]),t._v("和"),a("code",[t._v("Session Bean")]),t._v("继承了"),a("code",[t._v("Bean")]),t._v("。"),a("code",[t._v("EJB")]),t._v("拥有"),a("code",[t._v("Remote")]),t._v("和"),a("code",[t._v("Home")]),t._v("接口，和"),a("code",[t._v("JAR")]),t._v("包。")]),t._v(" "),a("h2",{attrs:{id:"什么是用例图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是用例图"}},[t._v("#")]),t._v(" 什么是"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E7%94%A8%E4%BE%8B%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("用例图"),a("OutboundLink")],1),t._v("？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】用例图是指由参与者、用例，边界以及它们之间的关系构成的用于描述系统功能的视图。")]),t._v(" "),a("li",[t._v("【目的】用来描述整个系统的功能。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/2f2fbcdaa76040e79da7732dd5caf852.png",alt:"img"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E7%94%A8%E4%BE%8B%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("用例图"),a("OutboundLink")],1),t._v("中包含以下三种关系：")]),t._v(" "),a("ul",[a("li",[t._v("包含关系使用符号《include》，想要查看订单列表，前提是需要先登录。")]),t._v(" "),a("li",[t._v("扩展关系使用符号《extend》，基于查询订单列表的功能，可以增加一个导出数据的功能")]),t._v(" "),a("li",[t._v("泛化关系，子用例继承父用例所有结构、行为和关系。")])]),t._v(" "),a("h2",{attrs:{id:"什么是活动图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是活动图"}},[t._v("#")]),t._v(" 什么是活动图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】描述了具体业务用例的实现流程。")]),t._v(" "),a("li",[t._v("【目的】用来表示用例实现的工作流程。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/9dd45f6c4da34e9dae24971b8102b083.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中简单描述了，从开始到登录到查看订单列表，或者登录失败直接结束。")]),t._v(" "),a("h2",{attrs:{id:"什么是状态机图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是状态机图"}},[t._v("#")]),t._v(" 什么是"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E7%8A%B6%E6%80%81%E6%9C%BA&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("状态机"),a("OutboundLink")],1),t._v("图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】状态机图对一个单独对象的行为建模，指明对象在它的整个生命周期里，响应不同事件时，执行相关事件的顺序。")]),t._v(" "),a("li",[t._v("【目的】用来表示指定对象，在整个生命周期，响应不同事件的不同状态。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/7e7163a33cb948cfaab2ddc0deda9c15.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中描述了，门在其生命周期内所经历的状态。")]),t._v(" "),a("h2",{attrs:{id:"什么是序列图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是序列图"}},[t._v("#")]),t._v(" 什么是"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%BA%8F%E5%88%97%E5%9B%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("序列图"),a("OutboundLink")],1),t._v("？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】序列图根据时间序列展示对象如何进行协作。它展示了在用例的特定场景中，对象如何与其他对象交互。")]),t._v(" "),a("li",[t._v("【目的】通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/a6b4cf4fd3004c0c93c2423c7a982daf.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中展示的是支付宝条码支付场景的序列图。其中，"),a("code",[t._v("loop")]),t._v("是循环，"),a("code",[t._v("alt")]),t._v("是选择，序列图的其他关系这里就不介绍了。")]),t._v(" "),a("h2",{attrs:{id:"什么是通讯图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是通讯图"}},[t._v("#")]),t._v(" 什么是通讯图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】描述了收发消息的对象的组织关系，强调对象之间的合作关系而不是时间顺序。")]),t._v(" "),a("li",[t._v("【目的】用来显示不同对象的关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/4a848cff28dc4615b1c8a55ee8f193f7.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中展示了一个线上书店的通讯图，方框和小人表示生命线，不同生命线之间可以传递消息，消息前面的数字可以表达序列顺序。")]),t._v(" "),a("h2",{attrs:{id:"什么是交互概览图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是交互概览图"}},[t._v("#")]),t._v(" 什么是交互概览图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】交互概览图与活动图类似，但是它的节点是交互图。")]),t._v(" "),a("li",[t._v("【目的】提供了控制流的概述。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/b28c88f52a4340e8b3ea28a37e59de71.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中表示一个调度系统的交互概览图，跟活动图很像。其中"),a("code",[t._v("sd")]),t._v("的框代表具体的交互流程，"),a("code",[t._v("ref")]),t._v("框代表使用交互。")]),t._v(" "),a("h2",{attrs:{id:"什么是时序图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是时序图"}},[t._v("#")]),t._v(" 什么是时序图？")]),t._v(" "),a("ul",[a("li",[t._v("【概念】时序图被用来显示随时间变化，一个或多个元素的值或状态的更改。也显示时控事件之间的交互和管理它们的时间和期限约束。")]),t._v(" "),a("li",[t._v("【目的】用来表示元素状态或者值随时间的变化而变化的视图。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Kryust/image/main/img/247de919746c4b5f856378485039d389.png",alt:"img"}})]),t._v(" "),a("p",[t._v("图中展示了老年痴呆病人随着时间的变化病情的变化。")])])}),[],!1,null,null,null);a.default=s.exports}}]);